@using DirectoryManager.Web.Constants
@using DirectoryManager.Web.Models
@using System.Globalization
@using DirectoryManager.Data.Enums
@model IEnumerable<SponsoredListingOfferModel>
@inject DirectoryManager.Web.Services.Interfaces.ICacheService _cacheHelper
@using DirectoryManager.Utilities.Helpers
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor
@inject NowPayments.API.Interfaces.INowPaymentsService nowPaymentsService
@using DirectoryManager.Web.Helpers
@using Microsoft.Extensions.Caching.Memory
@inject IMemoryCache memoryCache

@{
    Layout = "_CenteredLayout";
    ViewData[StringConstants.TitleHeader] = "Select Listing Duration";
    ViewData[StringConstants.IsIndexable] = false;

    var offersList = Model.ToList();
    int defaultChoiceIndex = 0;

    // Reservation context (set by controller if a valid reservation exists)
    Guid? reservationGuid = ViewBag.ReservationGuid is Guid g ? g : (Guid?)null;
    DateTime? reservationExpiresUtc = ViewBag.ReservationExpiresUtc is DateTime d ? d : (DateTime?)null;

    int? minutesLeft = reservationExpiresUtc.HasValue
        ? (int?)Math.Max(0, (int)Math.Ceiling((reservationExpiresUtc.Value - DateTime.UtcNow).TotalMinutes))
        : null;

    // Currency conversion context
    var conversionResult = await CurrencyConversionHelper.GetConversionContextAsync(httpContextAccessor, memoryCache, nowPaymentsService);
    bool showConverted = conversionResult.showConverted;
    decimal conversionRate = conversionResult.conversionRate;

    // Build back URL and only include rsvId if we have one
    var backUrl = Url.Content($"~/sponsoredlisting/selectlisting?sponsorshipType={ViewBag.SponsorshipType}"
        + (ViewBag.SubCategoryId != null ? $"&subCategoryId={ViewBag.SubCategoryId}" : string.Empty)
        + (ViewBag.CategoryId != null ? $"&categoryId={ViewBag.CategoryId}" : string.Empty)
        + (reservationGuid.HasValue ? $"&rsvId={reservationGuid}" : string.Empty));

    // Baseline "market" price is the first rendered row (per-day comparisons)
    decimal? baselineUsd = offersList.Count > 0 ? offersList[0].USDPrice : (decimal?)null;
    var usdCulture = new CultureInfo(DirectoryManager.Common.Constants.StringConstants.DefaultCulure);

    decimal? baselinePerDay = (offersList.Count > 0 && offersList[0].Days > 0)
        ? offersList[0].USDPrice / offersList[0].Days
        : (decimal?)null;
}

@section PageContent {
    <h1>@ViewData[StringConstants.TitleHeader]</h1>

    <hr />
    <a href="@backUrl">&lt; back</a>
    <hr />

    @if (reservationGuid.HasValue && reservationExpiresUtc.HasValue)
    {
        <div class="alert alert-warning" role="alert">
            <strong>Reserved checkout:</strong>
            Your slot is held until
            <b>@reservationExpiresUtc.Value.ToString(DirectoryManager.Common.Constants.StringConstants.DateTimeFormat)</b> UTC
            (@minutesLeft minute@(minutesLeft == 1 ? "" : "s") left).
            Selecting a duration will continue under this reservation.
        </div>
    }

    <p><b>Name:</b> @ViewBag.DirectoryEntrName</p>
    <p><b>Sponsorship Type:</b> @DirectoryManager.Utilities.Helpers.EnumHelper.GetDescription(ViewBag.SponsorshipType)</p>

    @if (ViewBag.SponsorshipType == DirectoryManager.Data.Enums.SponsorshipType.SubcategorySponsor)
    {
        <p><b>Subcategory:</b> @ViewBag.Subcategory</p>
    }
    else if (ViewBag.SponsorshipType == DirectoryManager.Data.Enums.SponsorshipType.CategorySponsor)
    {
        <p><b>Category:</b> @ViewBag.Category</p>
    }

    <br />

    <form method="post" action="~/sponsoredlisting/selectduration">
        @Html.AntiForgeryToken()

        <input type="hidden" name="directoryEntryId" value="@ViewBag.DirectoryEntryId" />
        @* Only send rsvId if we actually have one *@
        @if (reservationGuid.HasValue)
        {
            <input type="hidden" name="rsvId" value="@reservationGuid" />
        }

        <div class="form-group">
            <label>Available Options:</label>

            @for (var i = 0; i < offersList.Count; i++)
            {
                var offer = offersList[i];

                // Offer per-day and discount vs baseline per-day
                decimal? offerPerDay = offer.Days > 0 ? offer.USDPrice / offer.Days : (decimal?)null;
                decimal? usdDiscountPerDay = (i > 0 && baselinePerDay.HasValue && offerPerDay.HasValue)
                ? (baselinePerDay.Value - offerPerDay.Value)
                : (decimal?)null;

                decimal? pctDiscountPerDay = (usdDiscountPerDay.HasValue && baselinePerDay > 0)
                ? Math.Round((usdDiscountPerDay.Value / baselinePerDay.Value) * 100m, 1)
                : (decimal?)null;

                <div class="form-check" style="margin-bottom:8px;">
                    <label class="form-check-label" style="display:flex;align-items:center;gap:8px;flex-wrap:wrap;">
                        <input class="form-check-input"
                               type="radio"
                               name="selectedOfferId"
                               value="@offer.SponsoredListingOfferId"
                               @(i == defaultChoiceIndex ? "checked" : null) />

                        <span>
                            <b>@offer.Days</b>-Days &ndash;
                            @offer.USDPrice.ToString(DirectoryManager.Common.Constants.StringConstants.CurrentFormat, usdCulture) @Currency.USD
                            @if (i == 0)
                            {
                                <span class="badge bg-secondary" style="margin-left:6px;">Market price</span>
                            }
                        </span>

                        @* Converted currency (optional) *@
                        @if (showConverted)
                        {
                            <span>
                                &mdash;
                                @DirectoryManager.Utilities.Helpers.CurrencyFormatter.Format(
                                offer.USDPrice,
                                        conversionRate,
                                        conversionResult.selectedCurrency,
                                        true)
                </span>
                                }

                @* Show per-day for clarity *@
                @if (offerPerDay.HasValue)
                {
                    <span style="opacity:.8;">
                        &mdash; @offerPerDay.Value.ToString(DirectoryManager.Common.Constants.StringConstants.CurrentFormat, usdCulture)/day
                    </span>
                }

                @* Discount text (only for rows after the first and only if cheaper per day) *@
                @if (usdDiscountPerDay.HasValue && usdDiscountPerDay.Value > 0)
                {
                    <span class="text-danger" style="margin-left:6px;">
                        (@usdDiscountPerDay.Value.ToString(DirectoryManager.Common.Constants.StringConstants.CurrentFormat, usdCulture)/day off, @(pctDiscountPerDay)%)
                    </span>
                }
            </label>
        </div>
                }
    </div>

    @if (offersList.Count > 0)
    {
        <button type="submit" class="btn btn-primary">Select</button>
    }
    else
    {
        <p><i>No options</i></p>
    }
</form>
}
